This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  about/
    page.js
  api/
    posts/
      route.js
  posts/
    [id]/
      page.js
  write/
    page.js
  globals.css
  layout.js
  page.js
components/
  blog/
    PostCard.jsx
    PostContent.jsx
  layout/
    Footer.jsx
    Header.jsx
  ui/
    Button.jsx
    ThemeToggle.jsx
lib/
  posts.js
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
blog.iml
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/about/page.js">
"use client";

import { motion } from 'framer-motion';
import { FiGithub, FiTwitter, FiMail } from 'react-icons/fi';

export default function About() {
  return (
    <div className="max-w-3xl mx-auto py-8">
      <motion.h1 
        className="text-4xl font-bold mb-8 text-slate-900 dark:text-white"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        소개
      </motion.h1>
      
      <motion.div 
        className="space-y-6 text-secondary-700 dark:text-secondary-300"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2, duration: 0.5 }}
      >
        <p className="text-xl">
          안녕하세요! 이 블로그는 Next.js와 마크다운을 사용한 모던한 블로그 플랫폼입니다.
        </p>
        
        <h2 className="text-2xl font-semibold text-slate-900 dark:text-white mt-10 mb-4">
          기술 스택
        </h2>
        
        <ul className="list-disc pl-6 space-y-2">
          <li>Next.js 15 - 리액트 프레임워크</li>
          <li>Tailwind CSS - 스타일링</li>
          <li>Framer Motion - 애니메이션</li>
          <li>Markdown - 콘텐츠 작성</li>
        </ul>
        
        <h2 className="text-2xl font-semibold text-slate-900 dark:text-white mt-10 mb-4">
          기능
        </h2>
        
        <ul className="list-disc pl-6 space-y-2">
          <li>마크다운으로 글 작성</li>
          <li>반응형 디자인</li>
          <li>다크 모드 지원</li>
          <li>애니메이션 효과</li>
          <li>직관적인 UI/UX</li>
        </ul>
        
        <h2 className="text-2xl font-semibold text-slate-900 dark:text-white mt-10 mb-4">
          연락처
        </h2>
        
        <div className="flex items-center space-x-6 text-secondary-600 dark:text-secondary-400">
          <a 
            href="https://github.com" 
            target="_blank" 
            rel="noopener noreferrer"
            className="hover:text-primary-600 dark:hover:text-primary-400 transition-colors inline-flex items-center"
          >
            <FiGithub className="mr-2" size={20} />
            GitHub
          </a>
          <a 
            href="https://twitter.com" 
            target="_blank" 
            rel="noopener noreferrer"
            className="hover:text-primary-600 dark:hover:text-primary-400 transition-colors inline-flex items-center"
          >
            <FiTwitter className="mr-2" size={20} />
            Twitter
          </a>
          <a 
            href="mailto:email@example.com" 
            className="hover:text-primary-600 dark:hover:text-primary-400 transition-colors inline-flex items-center"
          >
            <FiMail className="mr-2" size={20} />
            이메일
          </a>
        </div>
      </motion.div>
    </div>
  );
}
</file>

<file path="app/api/posts/route.js">
import { savePost } from '../../../lib/posts';
import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const { title, content, category } = await request.json();
    
    if (!title || !content) {
      return NextResponse.json(
        { error: '제목과 내용을 모두 입력해주세요.' },
        { status: 400 }
      );
    }
    
    const id = savePost({ title, content, category });
    
    return NextResponse.json({ id, success: true }, { status: 201 });
  } catch (error) {
    console.error('Error saving post:', error);
    return NextResponse.json(
      { error: '포스트 저장 중 오류가 발생했습니다.' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/posts/[id]/page.js">
import { getAllPostIds, getPostData } from '../../../lib/posts';
import { PostContent } from '../../../components/blog/PostContent';
import { notFound } from 'next/navigation';

export const dynamic = 'force-dynamic';

export async function generateStaticParams() {
  const paths = getAllPostIds();
  return paths;
}

export default async function Post({ params }) {
  const postData = await getPostData(params.id);
  
  if (!postData) {
    notFound();
  }
  
  return <PostContent post={postData} />;
}
</file>

<file path="app/write/page.js">
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '../../components/ui/Button';
import { FiSave, FiEye, FiTag } from 'react-icons/fi';

// 카테고리 옵션
const categoryOptions = [
  { value: 'schedule', label: '시험 일정' },
  { value: 'certification', label: '자격증 정보' },
  { value: 'tips', label: '공부 팁' },
  { value: 'general', label: '일반' },
];

export default function WritePage() {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [category, setCategory] = useState('general');
  const [preview, setPreview] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const router = useRouter();

  const handleSave = async () => {
    if (!title.trim() || !content.trim()) {
      alert('제목과 내용을 모두 입력해주세요.');
      return;
    }

    setIsSaving(true);
    
    try {
      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ title, content, category }),
      });
      
      if (!response.ok) {
        throw new Error('저장에 실패했습니다');
      }
      
      const { id } = await response.json();
      router.push(`/posts/${id}`);
    } catch (error) {
      console.error('저장 중 오류 발생:', error);
      alert('저장 중 오류가 발생했습니다.');
      setIsSaving(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto py-8">
      <h1 className="text-3xl font-bold mb-8 text-slate-900 dark:text-white">
        새 글 작성하기
      </h1>
      
      <div className="mb-6 flex justify-end space-x-4">
        <Button 
          variant="outline" 
          onClick={() => setPreview(!preview)}
          className="inline-flex items-center"
        >
          <FiEye className="mr-2" />
          {preview ? '편집' : '미리보기'}
        </Button>
        
        <Button 
          variant="primary" 
          onClick={handleSave}
          isLoading={isSaving}
          className="inline-flex items-center"
        >
          <FiSave className="mr-2" />
          저장하기
        </Button>
      </div>
      
      <div>
        {!preview ? (
          <div className="space-y-4">
            <div>
              <label htmlFor="title" className="block mb-2 text-secondary-700 dark:text-secondary-300">
                제목
              </label>
              <input
                type="text"
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full rounded-md border border-secondary-300 dark:border-secondary-700 bg-white dark:bg-secondary-900 px-4 py-2 text-slate-900 dark:text-white focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500"
                placeholder="제목을 입력하세요"
              />
            </div>
            
            <div>
              <label htmlFor="category" className="block mb-2 text-secondary-700 dark:text-secondary-300">
                카테고리
              </label>
              <div className="relative">
                <select
                  id="category"
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  className="w-full rounded-md border border-secondary-300 dark:border-secondary-700 bg-white dark:bg-secondary-900 px-4 py-2 text-slate-900 dark:text-white focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500 appearance-none pl-10"
                >
                  {categoryOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-500 dark:text-secondary-400">
                  <FiTag size={18} />
                </div>
              </div>
            </div>
            
            <div>
              <label htmlFor="content" className="block mb-2 text-secondary-700 dark:text-secondary-300">
                내용 (마크다운 지원)
              </label>
              <textarea
                id="content"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                rows={20}
                className="w-full rounded-md border border-secondary-300 dark:border-secondary-700 bg-white dark:bg-secondary-900 px-4 py-2 text-slate-900 dark:text-white focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500 font-mono"
                placeholder="내용을 입력하세요 (마크다운 문법 지원)"
              />
            </div>
          </div>
        ) : (
          <div className="bg-white dark:bg-secondary-900 border border-secondary-200 dark:border-secondary-800 rounded-lg p-6">
            <div className="mb-3">
              <span className="category-tag">
                {categoryOptions.find(option => option.value === category)?.label || '일반'}
              </span>
            </div>
            <div className="prose dark:prose-invert prose-lg max-w-none">
              <h1>{title || '제목'}</h1>
              
              {content ? (
                <div dangerouslySetInnerHTML={{ __html: processMarkdown(content) }} />
              ) : (
                <p className="text-secondary-500 dark:text-secondary-400">내용을 입력해주세요...</p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function processMarkdown(markdown) {
  // 간단한 마크다운 처리
  let html = markdown
    // 헤딩 처리
    .replace(/^# (.*$)/gm, '<h1>$1</h1>')
    .replace(/^## (.*$)/gm, '<h2>$1</h2>')
    .replace(/^### (.*$)/gm, '<h3>$1</h3>')
    // 굵게 처리
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // 기울임 처리
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    // 링크 처리
    .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>')
    // 코드 블록 처리
    .replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>')
    // 인라인 코드 처리
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // 리스트 처리
    .replace(/^\- (.*$)/gm, '<li>$1</li>');
  
  // 단락 처리
  html = '<p>' + html.replace(/\n\n/g, '</p><p>') + '</p>';
  
  // 리스트 수정
  html = html.replace(/<li>.*?<\/li>/gs, match => {
    return '<ul>' + match + '</ul>';
  });
  
  return html;
}
</file>

<file path="components/blog/PostCard.jsx">
"use client";

import Link from 'next/link';
import { motion } from 'framer-motion';
import { format } from 'date-fns';
import { ko } from 'date-fns/locale';
import { FiCalendar, FiArrowRight } from 'react-icons/fi';

export function PostCard({ post }) {
  return (
    <motion.div 
      className="border border-secondary-200 dark:border-secondary-800 rounded-lg overflow-hidden hover:shadow-lg dark:hover:shadow-secondary-900/20 transition-shadow bg-white dark:bg-secondary-900"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      whileHover={{ y: -5 }}
    >
      <Link href={`/posts/${post.id}`} className="block p-6">
        <h3 className="text-xl font-semibold text-slate-900 dark:text-white mb-2 group-hover:text-primary-600 dark:group-hover:text-primary-400">
          {post.title}
        </h3>
        
        <div className="flex items-center text-secondary-500 dark:text-secondary-400 mb-4">
          <FiCalendar className="mr-2" />
          <time dateTime={post.date}>
            {format(new Date(post.date), 'yyyy년 MM월 dd일', { locale: ko })}
          </time>
        </div>
        
        <div className="text-secondary-600 dark:text-secondary-300 mb-4 line-clamp-3">
          {post.excerpt || post.content?.substring(0, 150) + '...'}
        </div>
        
        <div className="flex items-center text-primary-600 dark:text-primary-400 font-medium">
          <span>더 읽기</span>
          <FiArrowRight className="ml-2" />
        </div>
      </Link>
    </motion.div>
  );
}
</file>

<file path="components/blog/PostContent.jsx">
"use client";

import { FiCalendar, FiArrowLeft, FiTag } from 'react-icons/fi';
import Link from 'next/link';
import { categories } from '../../lib/posts';

export function PostContent({ post }) {
  if (!post) {
    return <div>포스트를 찾을 수 없습니다.</div>;
  }

  const categoryLabel = post.category ? (categories[post.category] || post.category) : '일반';

  return (
    <article className="max-w-3xl mx-auto my-8 px-4">
      <div className="mb-8">
        <Link 
          href="/" 
          className="inline-flex items-center text-primary-600 dark:text-primary-400 hover:underline"
        >
          <FiArrowLeft className="mr-2" />
          <span>모든 포스트</span>
        </Link>
      </div>
      
      <div className="mb-3">
        <span className="category-tag">
          <FiTag className="mr-1" />
          {categoryLabel}
        </span>
      </div>

      <h1 className="text-4xl font-bold mb-4 text-slate-900 dark:text-white">
        {post.title}
      </h1>
      
      <div className="date-display mb-8">
        <FiCalendar className="mr-2" />
        <time dateTime={post.date}>
          {new Date(post.date).toLocaleDateString('ko-KR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      </div>
      
      <div 
        className="prose dark:prose-invert prose-lg max-w-none"
        dangerouslySetInnerHTML={{ __html: post.contentHtml }}
      />
    </article>
  );
}
</file>

<file path="components/layout/Footer.jsx">
"use client";

import Link from 'next/link';
import { FiGithub, FiTwitter, FiInstagram } from 'react-icons/fi';

export function Footer() {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-[#ffffff] dark:bg-secondary-900 border-t border-secondary-100 dark:border-secondary-800 mt-12">
      <div className="container mx-auto py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* 로고 및 소개 */}
          <div className="md:col-span-2">
            <Link href="/">
              <h2 className="text-xl font-bold text-primary-600 dark:text-primary-400 mb-4">
                시험정보<span className="text-accent-500">블로그</span>
              </h2>
            </Link>
            <p className="text-secondary-600 dark:text-secondary-400 mb-4 max-w-md">
              시험과 자격증 준비에 필요한 모든 정보를 제공합니다. 
              일정, 팁, 그리고 합격을 위한 다양한 지식을 공유합니다.
            </p>
            <div className="flex space-x-4">
              <a href="#" className="text-secondary-500 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                <FiTwitter size={20} />
              </a>
              <a href="#" className="text-secondary-500 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                <FiGithub size={20} />
              </a>
              <a href="#" className="text-secondary-500 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                <FiInstagram size={20} />
              </a>
            </div>
          </div>

          {/* 카테고리 */}
          <div>
            <h3 className="text-lg font-semibold mb-4 text-slate-900 dark:text-white">카테고리</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/category/schedule" className="text-secondary-600 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                  시험 일정
                </Link>
              </li>
              <li>
                <Link href="/category/certification" className="text-secondary-600 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                  자격증 정보
                </Link>
              </li>
              <li>
                <Link href="/category/tips" className="text-secondary-600 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                  공부 팁
                </Link>
              </li>
            </ul>
          </div>

          {/* 유용한 링크 */}
          <div>
            <h3 className="text-lg font-semibold mb-4 text-slate-900 dark:text-white">바로가기</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/about" className="text-secondary-600 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                  소개
                </Link>
              </li>
              <li>
                <Link href="/write" className="text-secondary-600 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                  글쓰기
                </Link>
              </li>
              <li>
                <Link href="/archive" className="text-secondary-600 hover:text-primary-600 dark:text-secondary-400 dark:hover:text-primary-400 transition-colors">
                  전체 글 보기
                </Link>
              </li>
            </ul>
          </div>
        </div>
        
        <div className="border-t border-secondary-100 dark:border-secondary-800 mt-12 pt-6 text-center text-secondary-500 dark:text-secondary-400 text-sm">
          <p>© {currentYear} 시험정보블로그. 모든 권리 보유.</p>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="components/layout/Header.jsx">
"use client";

import Link from 'next/link';
import { useState } from 'react';
import { FiHome, FiEdit, FiInfo, FiCalendar, FiBook, FiAward, FiMenu, FiX } from 'react-icons/fi';
import { ThemeToggle } from '../ui/ThemeToggle';

// 카테고리 데이터
const categories = [
  { id: 'schedule', name: '시험 일정', icon: <FiCalendar className="mr-2" /> },
  { id: 'certification', name: '자격증 정보', icon: <FiAward className="mr-2" /> },
  { id: 'tips', name: '공부 팁', icon: <FiBook className="mr-2" /> },
];

export function Header() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [categoryMenuOpen, setCategoryMenuOpen] = useState(false);

  return (
    <header className="sticky top-0 z-40 bg-[#ffffff]/80 dark:bg-[#020617]/80 backdrop-blur-md border-b border-secondary-100 dark:border-secondary-800 py-4">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center">
          {/* 로고 */}
          <Link href="/" className="flex items-center">
            <span className="text-2xl font-bold text-primary-600 dark:text-primary-400 tracking-tight">
              시험정보<span className="text-accent-500">블로그</span>
            </span>
          </Link>

          {/* 데스크톱 메뉴 */}
          <nav className="hidden md:flex items-center space-x-1">
            <Link href="/" className="nav-link">
              <FiHome className="mr-1" />
              <span>홈</span>
            </Link>

            <div className="relative group">
              <button 
                className="nav-link"
                onClick={() => setCategoryMenuOpen(!categoryMenuOpen)}
                onMouseEnter={() => setCategoryMenuOpen(true)}
                onMouseLeave={() => setCategoryMenuOpen(false)}
              >
                <FiBook className="mr-1" />
                <span>카테고리</span>
              </button>
              
              {/* 드롭다운 메뉴 */}
              <div 
                className={`absolute top-full left-0 w-48 bg-[#ffffff] dark:bg-secondary-900 shadow-lg rounded-lg py-2 transform transition-all origin-top-left ${
                  categoryMenuOpen 
                    ? 'scale-100 opacity-100' 
                    : 'scale-95 opacity-0 pointer-events-none'
                }`}
                onMouseEnter={() => setCategoryMenuOpen(true)}
                onMouseLeave={() => setCategoryMenuOpen(false)}
              >
                {categories.map(category => (
                  <Link 
                    key={category.id}
                    href={`/category/${category.id}`}
                    className="flex items-center px-4 py-2 text-secondary-700 dark:text-secondary-300 hover:bg-secondary-100 dark:hover:bg-secondary-800"
                  >
                    {category.icon}
                    <span>{category.name}</span>
                  </Link>
                ))}
              </div>
            </div>

            <Link href="/write" className="nav-link">
              <FiEdit className="mr-1" />
              <span>글쓰기</span>
            </Link>
            
            <Link href="/about" className="nav-link">
              <FiInfo className="mr-1" />
              <span>소개</span>
            </Link>

            <div className="px-3">
              <ThemeToggle />
            </div>
          </nav>

          {/* 모바일 메뉴 버튼 */}
          <div className="flex items-center md:hidden">
            <ThemeToggle />
            <button
              className="ml-4 p-1 text-secondary-500 dark:text-secondary-400 hover:text-secondary-700 dark:hover:text-secondary-200"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            >
              {mobileMenuOpen ? (
                <FiX size={24} />
              ) : (
                <FiMenu size={24} />
              )}
            </button>
          </div>
        </div>

        {/* 모바일 메뉴 */}
        <div className={`md:hidden ${mobileMenuOpen ? 'block' : 'hidden'}`}>
          <div className="py-3 space-y-1 animate-slide-up">
            <Link
              href="/"
              className="flex items-center py-2 px-4 rounded-lg text-secondary-700 dark:text-secondary-300 hover:bg-secondary-100 dark:hover:bg-secondary-800"
              onClick={() => setMobileMenuOpen(false)}
            >
              <FiHome className="mr-3" />
              <span>홈</span>
            </Link>
            
            {/* 카테고리 메뉴 */}
            <div className="py-2 px-4">
              <div className="font-medium text-slate-900 dark:text-white mb-2">카테고리</div>
              <div className="pl-3 space-y-1 border-l-2 border-secondary-200 dark:border-secondary-700">
                {categories.map(category => (
                  <Link
                    key={category.id}
                    href={`/category/${category.id}`}
                    className="flex items-center py-1 px-3 text-sm text-secondary-700 dark:text-secondary-300 hover:text-primary-600 dark:hover:text-primary-400"
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    {category.icon}
                    <span>{category.name}</span>
                  </Link>
                ))}
              </div>
            </div>

            <Link
              href="/write"
              className="flex items-center py-2 px-4 rounded-lg text-secondary-700 dark:text-secondary-300 hover:bg-secondary-100 dark:hover:bg-secondary-800"
              onClick={() => setMobileMenuOpen(false)}
            >
              <FiEdit className="mr-3" />
              <span>글쓰기</span>
            </Link>
            
            <Link
              href="/about"
              className="flex items-center py-2 px-4 rounded-lg text-secondary-700 dark:text-secondary-300 hover:bg-secondary-100 dark:hover:bg-secondary-800"
              onClick={() => setMobileMenuOpen(false)}
            >
              <FiInfo className="mr-3" />
              <span>소개</span>
            </Link>
          </div>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="components/ui/Button.jsx">
"use client";

import { forwardRef } from 'react';
import { motion } from 'framer-motion';
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

const Button = forwardRef(({ 
  children, 
  className, 
  variant = 'primary', 
  size = 'md',
  isLoading = false,
  disabled = false,
  ...props 
}, ref) => {
  const variants = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600',
    secondary: 'bg-secondary-200 text-slate-900 hover:bg-secondary-300 dark:bg-secondary-800 dark:text-white dark:hover:bg-secondary-700',
    outline: 'border border-secondary-300 bg-transparent text-slate-900 hover:bg-secondary-100 dark:border-secondary-700 dark:text-white dark:hover:bg-secondary-800',
    ghost: 'bg-transparent text-slate-900 hover:bg-secondary-100 dark:text-white dark:hover:bg-secondary-800',
    danger: 'bg-red-600 text-white hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600',
  };

  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-5 py-2.5 text-lg',
  };

  const buttonClasses = twMerge(
    clsx(
      'inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-secondary-900 disabled:opacity-50 disabled:pointer-events-none',
      variants[variant],
      sizes[size],
      className
    )
  );

  return (
    <motion.button
      ref={ref}
      className={buttonClasses}
      disabled={disabled || isLoading}
      whileHover={{ scale: disabled || isLoading ? 1 : 1.02 }}
      whileTap={{ scale: disabled || isLoading ? 1 : 0.98 }}
      {...props}
    >
      {isLoading ? (
        <span className="mr-2 inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent align-[-0.125em]" />
      ) : null}
      {children}
    </motion.button>
  );
});

Button.displayName = 'Button';

export { Button };
</file>

<file path="components/ui/ThemeToggle.jsx">
"use client";

import { useState, useEffect } from 'react';
import { FiSun, FiMoon } from 'react-icons/fi';
import { motion } from 'framer-motion';

export function ThemeToggle() {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const storedTheme = localStorage.getItem('theme') || 'light';
    setTheme(storedTheme);
    document.documentElement.classList.toggle('dark', storedTheme === 'dark');
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    document.documentElement.classList.toggle('dark', newTheme === 'dark');
    localStorage.setItem('theme', newTheme);
  };

  return (
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      onClick={toggleTheme}
      className="p-2 rounded-full bg-secondary-100 dark:bg-secondary-800 text-secondary-800 dark:text-secondary-100"
      aria-label={theme === 'light' ? '다크 모드로 전환' : '라이트 모드로 전환'}
    >
      {theme === 'light' ? <FiMoon size={20} /> : <FiSun size={20} />}
    </motion.button>
  );
}
</file>

<file path="lib/posts.js">
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { remark } from 'remark';
import html from 'remark-html';

const postsDirectory = path.join(process.cwd(), 'posts');

// 카테고리 정보
export const categories = {
    'schedule': '시험 일정',
    'certification': '자격증 정보',
    'tips': '공부 팁',
    'general': '일반'
};

// 모든 포스트 데이터 가져오기
export function getSortedPostsData() {
    // posts 디렉토리 없을 경우 생성
    if (!fs.existsSync(postsDirectory)) {
        fs.mkdirSync(postsDirectory, { recursive: true });
        return [];
    }

    // 파일 이름 목록 얻기
    const fileNames = fs.readdirSync(postsDirectory);

    if (fileNames.length === 0) {
        return [];
    }

    const allPostsData = fileNames.map(fileName => {
        // 파일 이름에서 ".md" 제거해서 id 얻기
        const id = fileName.replace(/\.md$/, '');

        // 마크다운 파일을 문자열로 읽기
        const fullPath = path.join(postsDirectory, fileName);
        const fileContents = fs.readFileSync(fullPath, 'utf8');

        // gray-matter로 파일 메타데이터 파싱
        const matterResult = matter(fileContents);

        // 데이터 객체 반환
        return {
            id,
            ...matterResult.data,
            content: matterResult.content
        };
    });

    // 날짜로 정렬
    return allPostsData.sort((a, b) => {
        if (a.date < b.date) {
            return 1;
        } else {
            return -1;
        }
    });
}

// 모든 포스트 ID 가져오기 (동적 라우팅용)
export function getAllPostIds() {
    // posts 디렉토리 없을 경우 생성
    if (!fs.existsSync(postsDirectory)) {
        fs.mkdirSync(postsDirectory, { recursive: true });
        return [];
    }

    const fileNames = fs.readdirSync(postsDirectory);

    return fileNames.map(fileName => {
        return {
            id: fileName.replace(/\.md$/, '')
        };
    });
}

// 포스트 데이터 가져오기
export async function getPostData(id) {
    const fullPath = path.join(postsDirectory, `${id}.md`);

    // 파일이 없으면 null 반환
    if (!fs.existsSync(fullPath)) {
        return null;
    }

    const fileContents = fs.readFileSync(fullPath, 'utf8');

    // gray-matter로 파싱
    const matterResult = matter(fileContents);

    // remark를 사용해 마크다운을 HTML로 변환
    const processedContent = await remark()
        .use(html)
        .process(matterResult.content);
    const contentHtml = processedContent.toString();

    // 데이터 객체 반환
    return {
        id,
        contentHtml,
        ...matterResult.data
    };
}

// 새 포스트 저장
export function savePost({ title, content, category = 'general' }) {
    // posts 디렉토리 없을 경우 생성
    if (!fs.existsSync(postsDirectory)) {
        fs.mkdirSync(postsDirectory, { recursive: true });
    }

    // 현재 날짜와 시간
    const date = new Date().toISOString();

    // 파일 이름 (날짜 + 제목)으로 ID 생성
    const id = `${Date.now()}-${title.toLowerCase().replace(/\s+/g, '-')}`;

    // 마크다운 파일 내용 생성
    const fileContent = `---
title: "${title}"
date: "${date}"
category: "${category}"
---

${content}`;

    // 파일 저장
    const filePath = path.join(postsDirectory, `${id}.md`);
    fs.writeFileSync(filePath, fileContent);

    return id;
}
</file>

<file path="app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="app/layout.js">
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Header } from "../components/layout/Header";
import { Footer } from "../components/layout/Footer";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "시험정보블로그",
  description: "시험과 자격증 준비에 필요한 모든 정보를 제공하는 블로그",
};

export default function RootLayout({ children }) {
  return (
    <html lang="ko" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-[#ffffff] dark:bg-[#020617] text-slate-900 dark:text-white transition-colors`}
      >
        <div className="flex flex-col min-h-screen">
          <Header />
          <main className="flex-grow">{children}</main>
          <Footer />
        </div>
      </body>
    </html>
  );
}
</file>

<file path="app/page.js">
import { FiEdit, FiCalendar, FiAward, FiBook, FiArrowRight } from 'react-icons/fi';
import Link from 'next/link';
import { Button } from '../components/ui/Button';
import { getSortedPostsData } from '../lib/posts';

const categories = [
  { id: 'schedule', name: '시험 일정', icon: <FiCalendar size={24} className="mb-3" />, description: '각종 시험 일정과 접수 정보' },
  { id: 'certification', name: '자격증 정보', icon: <FiAward size={24} className="mb-3" />, description: '다양한 자격증 취득 방법 및 팁' },
  { id: 'tips', name: '공부 팁', icon: <FiBook size={24} className="mb-3" />, description: '효율적인 학습법과 합격 비결' },
];

export default function Home() {
  const allPostsData = getSortedPostsData();

  return (
    <div className="py-8">
      {/* 히어로 섹션 */}
      <section className="py-16 px-4 mb-20 rounded-3xl bg-gradient-to-br from-primary-500 to-primary-700 text-white">
        <div className="container mx-auto">
          <div className="max-w-2xl mx-auto text-center">
            <h1 className="text-4xl sm:text-5xl font-bold mb-6 animate-fade-in">
              시험 합격을 위한<br />
              모든 정보를 한곳에서
            </h1>
            <p className="text-xl opacity-90 mb-8 animate-slide-up">
              시험 일정부터 자격증 정보, 합격을 위한 꿀팁까지
              필요한 모든 정보를 찾아보세요.
            </p>
            <div className="flex justify-center space-x-4">
              <Link href="/category/schedule" className="bg-white text-primary-700 hover:bg-primary-50 px-6 py-3 rounded-lg font-medium transition-colors animate-slide-up">
                시험 일정 확인하기
              </Link>
              <Link href="/write" className="bg-primary-600 text-white hover:bg-primary-700 border border-white/20 px-6 py-3 rounded-lg font-medium transition-colors animate-slide-up">
                <FiEdit className="mr-2 inline-block" />
                글 작성하기
              </Link>
            </div>
          </div>
        </div>
      </section>
      
      {/* 카테고리 섹션 */}
      <section className="mb-20">
        <div className="container mx-auto">
          <h2 className="section-title text-center mb-12">주요 카테고리</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {categories.map((category) => (
              <Link 
                href={`/category/${category.id}`} 
                key={category.id}
                className="card p-8 text-center group"
              >
                <div className="text-primary-500 flex justify-center">{category.icon}</div>
                <h3 className="text-xl font-bold mb-2 text-slate-900 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
                  {category.name}
                </h3>
                <p className="text-secondary-600 dark:text-secondary-400 mb-4">{category.description}</p>
                <span className="inline-flex items-center text-primary-600 dark:text-primary-400 font-medium">
                  더 알아보기
                  <FiArrowRight className="ml-1 group-hover:translate-x-1 transition-transform" />
                </span>
              </Link>
            ))}
          </div>
        </div>
      </section>
      
      {/* 최신 글 섹션 */}
      <section className="mb-16">
        <div className="container mx-auto">
          <h2 className="section-title text-center mb-12">최신 게시물</h2>
          
          {allPostsData.length === 0 ? (
            <div className="text-center py-12 bg-secondary-100 dark:bg-secondary-900 rounded-xl">
              <h3 className="text-xl text-secondary-600 dark:text-secondary-400">아직 작성된 포스트가 없습니다.</h3>
              <p className="mt-2 text-secondary-500 dark:text-secondary-500">첫 번째 글을 작성해보세요!</p>
            </div>
          ) : (
            <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
              {allPostsData.map((post, index) => (
                <div 
                  key={post.id}
                  className="card"
                >
                  <Link href={`/posts/${post.id}`} className="block p-6">
                    <div className="mb-3">
                      <span className="category-tag">
                        {post.category || '일반'}
                      </span>
                    </div>
                    <h3 className="text-xl font-bold mb-2 text-slate-900 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-400">
                      {post.title}
                    </h3>
                    
                    <div className="date-display mb-4">
                      <FiCalendar className="mr-2" />
                      <time dateTime={post.date}>
                        {new Date(post.date).toLocaleDateString('ko-KR', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </time>
                    </div>
                    
                    <div className="text-secondary-600 dark:text-secondary-300 mb-4 line-clamp-3">
                      {post.excerpt || post.content?.substring(0, 150) + '...'}
                    </div>
                    
                    <div className="flex items-center text-primary-600 dark:text-primary-400 font-medium">
                      <span>더 읽기</span>
                      <FiArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </Link>
                </div>
              ))}
            </div>
          )}
          
          <div className="text-center mt-12">
            <Link 
              href="/archive" 
              className="inline-flex items-center px-6 py-3 rounded-lg bg-secondary-100 hover:bg-secondary-200 dark:bg-secondary-800 dark:hover:bg-secondary-700 text-slate-900 dark:text-white transition-colors"
            >
              모든 게시물 보기
              <FiArrowRight className="ml-2" />
            </Link>
          </div>
        </div>
      </section>
    </div>
  );
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="blog.iml">
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "blog",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.6.3",
    "gray-matter": "^4.0.3",
    "next": "15.2.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "tailwind-merge": "^3.1.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

</files>
